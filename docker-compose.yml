version: "3.9"

services:
  nginx:
    build:
      context: ./webserver
    container_name: nginx
    ports:
      - 8000:8000
    restart: always
    depends_on:
      - koa
      - ruby
    environment:
      - PROXY_UPSTREAM=ruby
    volumes:
      - ./webserver/proxy.conf:/etc/nginx/conf.d/default.conf
      - ./webserver/images:/usr/share/nginx/html
    # to mount bind the static files for Nginx to serve instead of Puma and Node/PM2
    # both static files from Node & Sinatra should be copied in /webserver/images

  koa:
    image: koa-img
    deploy:
      replicas: 2
    build:
      context: ./koa
    # user: "node"
    # container_name: koa
    env_file:
      - .env
    environment:
      - NODE_ENV=development
    # for scaling containers, only internal port
    ports:
      - 3000
    # for single container accessible from outside,
    # we specify the outer port 4000.
    # ports:
    #   - 4000:3000
    expose:
      - 4000
    volumes:
      - ./koa:/node
    command:
      ["./node_modules/.bin/pm2-runtime", "start", "index.js", "--watch"]
      # ["./node_modules/.bin/nodemon", "index.js"]
    depends_on:
      pg:
        condition: service_healthy

  ruby:
    image: ruby-img
    deploy:
      replicas: 2
    build:
      context: ./sinatra
    env_file:
      - .env
    # for scaling container,s only internal port
    ports:
      - 9292
    # for single container accessible from outside, we specify the outer port
    # ports:
    # - 9000:9292
    expose:
      - 9000
    volumes:
      - ./sinatra:/app:ro
    depends_on:
      pg:
        condition: service_healthy
    #  stdin_open: true
    #  tty: true
    # restart: on-failure
    command: ["bundle", "exec", "rackup -o 0.0.0.0"]

  pg:
    image: postgres:13.2-alpine
    # build: .
    env_file:
      - .env
    ports:
      - 5000:5432
    container_name: pg
    volumes:
      - pg-vol:/var/lib/postgresql/data
      - ./bins/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h pg "]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pg-vol:
